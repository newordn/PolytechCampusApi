// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  crew: (where?: CrewWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  crew: (where: CrewWhereUniqueInput) => CrewNullablePromise;
  crews: (args?: {
    where?: CrewWhereInput;
    orderBy?: CrewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Crew>;
  crewsConnection: (args?: {
    where?: CrewWhereInput;
    orderBy?: CrewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CrewConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCrew: (data: CrewCreateInput) => CrewPromise;
  updateCrew: (args: {
    data: CrewUpdateInput;
    where: CrewWhereUniqueInput;
  }) => CrewPromise;
  updateManyCrews: (args: {
    data: CrewUpdateManyMutationInput;
    where?: CrewWhereInput;
  }) => BatchPayloadPromise;
  upsertCrew: (args: {
    where: CrewWhereUniqueInput;
    create: CrewCreateInput;
    update: CrewUpdateInput;
  }) => CrewPromise;
  deleteCrew: (where: CrewWhereUniqueInput) => CrewPromise;
  deleteManyCrews: (where?: CrewWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  crew: (
    where?: CrewSubscriptionWhereInput
  ) => CrewSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "matricule_ASC"
  | "matricule_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "role_ASC"
  | "role_DESC"
  | "code_ASC"
  | "code_DESC"
  | "filiere_ASC"
  | "filiere_DESC"
  | "option_ASC"
  | "option_DESC"
  | "password_ASC"
  | "password_DESC";

export type CrewOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface PostUpdateWithWhereUniqueWithoutPostedByInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutPostedByDataInput;
}

export type CrewWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CrewUpdateOneRequiredWithoutPostsInput {
  create?: Maybe<CrewCreateWithoutPostsInput>;
  update?: Maybe<CrewUpdateWithoutPostsDataInput>;
  upsert?: Maybe<CrewUpsertWithoutPostsInput>;
  connect?: Maybe<CrewWhereUniqueInput>;
}

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  postedBy?: Maybe<UserWhereInput>;
  belongTo?: Maybe<CrewWhereInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface CrewCreateManyWithoutUsersInput {
  create?: Maybe<CrewCreateWithoutUsersInput[] | CrewCreateWithoutUsersInput>;
  connect?: Maybe<CrewWhereUniqueInput[] | CrewWhereUniqueInput>;
}

export interface CrewUpsertWithWhereUniqueWithoutUsersInput {
  where: CrewWhereUniqueInput;
  update: CrewUpdateWithoutUsersDataInput;
  create: CrewCreateWithoutUsersInput;
}

export interface CrewCreateWithoutUsersInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  posts?: Maybe<PostCreateManyWithoutBelongToInput>;
}

export interface CrewUpdateWithoutPostsDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  users?: Maybe<UserUpdateManyWithoutCrewsInput>;
}

export interface CrewUpdateInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  users?: Maybe<UserUpdateManyWithoutCrewsInput>;
  posts?: Maybe<PostUpdateManyWithoutBelongToInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserUpdateManyWithoutCrewsInput {
  create?: Maybe<UserCreateWithoutCrewsInput[] | UserCreateWithoutCrewsInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutCrewsInput[]
    | UserUpdateWithWhereUniqueWithoutCrewsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutCrewsInput[]
    | UserUpsertWithWhereUniqueWithoutCrewsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface CrewSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CrewWhereInput>;
  AND?: Maybe<CrewSubscriptionWhereInput[] | CrewSubscriptionWhereInput>;
  OR?: Maybe<CrewSubscriptionWhereInput[] | CrewSubscriptionWhereInput>;
  NOT?: Maybe<CrewSubscriptionWhereInput[] | CrewSubscriptionWhereInput>;
}

export interface UserUpdateWithWhereUniqueWithoutCrewsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutCrewsDataInput;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  matricule?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  role?: Maybe<String>;
  code?: Maybe<String>;
  filiere?: Maybe<String>;
  option?: Maybe<String>;
  password?: Maybe<String>;
  crews?: Maybe<CrewUpdateManyWithoutUsersInput>;
  posts?: Maybe<PostUpdateManyWithoutPostedByInput>;
}

export interface UserUpdateWithoutCrewsDataInput {
  name?: Maybe<String>;
  matricule?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  role?: Maybe<String>;
  code?: Maybe<String>;
  filiere?: Maybe<String>;
  option?: Maybe<String>;
  password?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutPostedByInput>;
}

export interface PostUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  files?: Maybe<PostUpdatefilesInput>;
}

export interface PostUpdateManyWithoutPostedByInput {
  create?: Maybe<
    PostCreateWithoutPostedByInput[] | PostCreateWithoutPostedByInput
  >;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutPostedByInput[]
    | PostUpdateWithWhereUniqueWithoutPostedByInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutPostedByInput[]
    | PostUpsertWithWhereUniqueWithoutPostedByInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  files?: Maybe<PostUpdatefilesInput>;
  postedBy?: Maybe<UserUpdateOneWithoutPostsInput>;
  belongTo?: Maybe<CrewUpdateOneRequiredWithoutPostsInput>;
}

export interface CrewUpdateManyWithWhereNestedInput {
  where: CrewScalarWhereInput;
  data: CrewUpdateManyDataInput;
}

export interface CrewUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
}

export interface PostUpdateWithoutPostedByDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  files?: Maybe<PostUpdatefilesInput>;
  belongTo?: Maybe<CrewUpdateOneRequiredWithoutPostsInput>;
}

export interface PostUpsertWithWhereUniqueWithoutBelongToInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutBelongToDataInput;
  create: PostCreateWithoutBelongToInput;
}

export interface PostUpdatefilesInput {
  set?: Maybe<String[] | String>;
}

export interface CrewUpdateManyDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
}

export interface CrewWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  users_every?: Maybe<UserWhereInput>;
  users_some?: Maybe<UserWhereInput>;
  users_none?: Maybe<UserWhereInput>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  AND?: Maybe<CrewWhereInput[] | CrewWhereInput>;
  OR?: Maybe<CrewWhereInput[] | CrewWhereInput>;
  NOT?: Maybe<CrewWhereInput[] | CrewWhereInput>;
}

export interface CrewCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  users?: Maybe<UserCreateManyWithoutCrewsInput>;
  posts?: Maybe<PostCreateManyWithoutBelongToInput>;
}

export interface CrewScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<CrewScalarWhereInput[] | CrewScalarWhereInput>;
  OR?: Maybe<CrewScalarWhereInput[] | CrewScalarWhereInput>;
  NOT?: Maybe<CrewScalarWhereInput[] | CrewScalarWhereInput>;
}

export interface UserCreateWithoutCrewsInput {
  id?: Maybe<ID_Input>;
  name: String;
  matricule: String;
  email: String;
  phone: String;
  role: String;
  code: String;
  filiere: String;
  option: String;
  password: String;
  posts?: Maybe<PostCreateManyWithoutPostedByInput>;
}

export interface CrewUpsertWithoutPostsInput {
  update: CrewUpdateWithoutPostsDataInput;
  create: CrewCreateWithoutPostsInput;
}

export interface PostCreateWithoutPostedByInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  files?: Maybe<PostCreatefilesInput>;
  belongTo: CrewCreateOneWithoutPostsInput;
}

export interface PostUpsertWithWhereUniqueWithoutPostedByInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutPostedByDataInput;
  create: PostCreateWithoutPostedByInput;
}

export interface CrewCreateOneWithoutPostsInput {
  create?: Maybe<CrewCreateWithoutPostsInput>;
  connect?: Maybe<CrewWhereUniqueInput>;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export interface PostCreateManyWithoutBelongToInput {
  create?: Maybe<
    PostCreateWithoutBelongToInput[] | PostCreateWithoutBelongToInput
  >;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface UserCreateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PostUpdateManyDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  files?: Maybe<PostUpdatefilesInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  matricule?: Maybe<String>;
  matricule_not?: Maybe<String>;
  matricule_in?: Maybe<String[] | String>;
  matricule_not_in?: Maybe<String[] | String>;
  matricule_lt?: Maybe<String>;
  matricule_lte?: Maybe<String>;
  matricule_gt?: Maybe<String>;
  matricule_gte?: Maybe<String>;
  matricule_contains?: Maybe<String>;
  matricule_not_contains?: Maybe<String>;
  matricule_starts_with?: Maybe<String>;
  matricule_not_starts_with?: Maybe<String>;
  matricule_ends_with?: Maybe<String>;
  matricule_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  role?: Maybe<String>;
  role_not?: Maybe<String>;
  role_in?: Maybe<String[] | String>;
  role_not_in?: Maybe<String[] | String>;
  role_lt?: Maybe<String>;
  role_lte?: Maybe<String>;
  role_gt?: Maybe<String>;
  role_gte?: Maybe<String>;
  role_contains?: Maybe<String>;
  role_not_contains?: Maybe<String>;
  role_starts_with?: Maybe<String>;
  role_not_starts_with?: Maybe<String>;
  role_ends_with?: Maybe<String>;
  role_not_ends_with?: Maybe<String>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  filiere?: Maybe<String>;
  filiere_not?: Maybe<String>;
  filiere_in?: Maybe<String[] | String>;
  filiere_not_in?: Maybe<String[] | String>;
  filiere_lt?: Maybe<String>;
  filiere_lte?: Maybe<String>;
  filiere_gt?: Maybe<String>;
  filiere_gte?: Maybe<String>;
  filiere_contains?: Maybe<String>;
  filiere_not_contains?: Maybe<String>;
  filiere_starts_with?: Maybe<String>;
  filiere_not_starts_with?: Maybe<String>;
  filiere_ends_with?: Maybe<String>;
  filiere_not_ends_with?: Maybe<String>;
  option?: Maybe<String>;
  option_not?: Maybe<String>;
  option_in?: Maybe<String[] | String>;
  option_not_in?: Maybe<String[] | String>;
  option_lt?: Maybe<String>;
  option_lte?: Maybe<String>;
  option_gt?: Maybe<String>;
  option_gte?: Maybe<String>;
  option_contains?: Maybe<String>;
  option_not_contains?: Maybe<String>;
  option_starts_with?: Maybe<String>;
  option_not_starts_with?: Maybe<String>;
  option_ends_with?: Maybe<String>;
  option_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  crews_every?: Maybe<CrewWhereInput>;
  crews_some?: Maybe<CrewWhereInput>;
  crews_none?: Maybe<CrewWhereInput>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserUpsertWithWhereUniqueWithoutCrewsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutCrewsDataInput;
  create: UserCreateWithoutCrewsInput;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  matricule?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  role?: Maybe<String>;
  code?: Maybe<String>;
  filiere?: Maybe<String>;
  option?: Maybe<String>;
  password?: Maybe<String>;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  matricule?: Maybe<String>;
  matricule_not?: Maybe<String>;
  matricule_in?: Maybe<String[] | String>;
  matricule_not_in?: Maybe<String[] | String>;
  matricule_lt?: Maybe<String>;
  matricule_lte?: Maybe<String>;
  matricule_gt?: Maybe<String>;
  matricule_gte?: Maybe<String>;
  matricule_contains?: Maybe<String>;
  matricule_not_contains?: Maybe<String>;
  matricule_starts_with?: Maybe<String>;
  matricule_not_starts_with?: Maybe<String>;
  matricule_ends_with?: Maybe<String>;
  matricule_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  role?: Maybe<String>;
  role_not?: Maybe<String>;
  role_in?: Maybe<String[] | String>;
  role_not_in?: Maybe<String[] | String>;
  role_lt?: Maybe<String>;
  role_lte?: Maybe<String>;
  role_gt?: Maybe<String>;
  role_gte?: Maybe<String>;
  role_contains?: Maybe<String>;
  role_not_contains?: Maybe<String>;
  role_starts_with?: Maybe<String>;
  role_not_starts_with?: Maybe<String>;
  role_ends_with?: Maybe<String>;
  role_not_ends_with?: Maybe<String>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  filiere?: Maybe<String>;
  filiere_not?: Maybe<String>;
  filiere_in?: Maybe<String[] | String>;
  filiere_not_in?: Maybe<String[] | String>;
  filiere_lt?: Maybe<String>;
  filiere_lte?: Maybe<String>;
  filiere_gt?: Maybe<String>;
  filiere_gte?: Maybe<String>;
  filiere_contains?: Maybe<String>;
  filiere_not_contains?: Maybe<String>;
  filiere_starts_with?: Maybe<String>;
  filiere_not_starts_with?: Maybe<String>;
  filiere_ends_with?: Maybe<String>;
  filiere_not_ends_with?: Maybe<String>;
  option?: Maybe<String>;
  option_not?: Maybe<String>;
  option_in?: Maybe<String[] | String>;
  option_not_in?: Maybe<String[] | String>;
  option_lt?: Maybe<String>;
  option_lte?: Maybe<String>;
  option_gt?: Maybe<String>;
  option_gte?: Maybe<String>;
  option_contains?: Maybe<String>;
  option_not_contains?: Maybe<String>;
  option_starts_with?: Maybe<String>;
  option_not_starts_with?: Maybe<String>;
  option_ends_with?: Maybe<String>;
  option_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  matricule?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
}>;

export interface UserUpdateManyDataInput {
  name?: Maybe<String>;
  matricule?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  role?: Maybe<String>;
  code?: Maybe<String>;
  filiere?: Maybe<String>;
  option?: Maybe<String>;
  password?: Maybe<String>;
}

export interface PostCreateManyWithoutPostedByInput {
  create?: Maybe<
    PostCreateWithoutPostedByInput[] | PostCreateWithoutPostedByInput
  >;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostUpdateManyWithoutBelongToInput {
  create?: Maybe<
    PostCreateWithoutBelongToInput[] | PostCreateWithoutBelongToInput
  >;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutBelongToInput[]
    | PostUpdateWithWhereUniqueWithoutBelongToInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutBelongToInput[]
    | PostUpsertWithWhereUniqueWithoutBelongToInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface CrewCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  users?: Maybe<UserCreateManyWithoutCrewsInput>;
}

export interface PostUpdateWithWhereUniqueWithoutBelongToInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutBelongToDataInput;
}

export interface UserCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  name: String;
  matricule: String;
  email: String;
  phone: String;
  role: String;
  code: String;
  filiere: String;
  option: String;
  password: String;
  crews?: Maybe<CrewCreateManyWithoutUsersInput>;
}

export interface PostUpdateWithoutBelongToDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  files?: Maybe<PostUpdatefilesInput>;
  postedBy?: Maybe<UserUpdateOneWithoutPostsInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  matricule: String;
  email: String;
  phone: String;
  role: String;
  code: String;
  filiere: String;
  option: String;
  password: String;
  crews?: Maybe<CrewCreateManyWithoutUsersInput>;
  posts?: Maybe<PostCreateManyWithoutPostedByInput>;
}

export interface UserUpdateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  update?: Maybe<UserUpdateWithoutPostsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPostsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface CrewUpdateWithoutUsersDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutBelongToInput>;
}

export interface CrewUpdateWithWhereUniqueWithoutUsersInput {
  where: CrewWhereUniqueInput;
  data: CrewUpdateWithoutUsersDataInput;
}

export interface CrewUpdateManyWithoutUsersInput {
  create?: Maybe<CrewCreateWithoutUsersInput[] | CrewCreateWithoutUsersInput>;
  delete?: Maybe<CrewWhereUniqueInput[] | CrewWhereUniqueInput>;
  connect?: Maybe<CrewWhereUniqueInput[] | CrewWhereUniqueInput>;
  set?: Maybe<CrewWhereUniqueInput[] | CrewWhereUniqueInput>;
  disconnect?: Maybe<CrewWhereUniqueInput[] | CrewWhereUniqueInput>;
  update?: Maybe<
    | CrewUpdateWithWhereUniqueWithoutUsersInput[]
    | CrewUpdateWithWhereUniqueWithoutUsersInput
  >;
  upsert?: Maybe<
    | CrewUpsertWithWhereUniqueWithoutUsersInput[]
    | CrewUpsertWithWhereUniqueWithoutUsersInput
  >;
  deleteMany?: Maybe<CrewScalarWhereInput[] | CrewScalarWhereInput>;
  updateMany?: Maybe<
    CrewUpdateManyWithWhereNestedInput[] | CrewUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithoutPostsDataInput {
  name?: Maybe<String>;
  matricule?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  role?: Maybe<String>;
  code?: Maybe<String>;
  filiere?: Maybe<String>;
  option?: Maybe<String>;
  password?: Maybe<String>;
  crews?: Maybe<CrewUpdateManyWithoutUsersInput>;
}

export interface UserCreateManyWithoutCrewsInput {
  create?: Maybe<UserCreateWithoutCrewsInput[] | UserCreateWithoutCrewsInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  files?: Maybe<PostCreatefilesInput>;
  postedBy?: Maybe<UserCreateOneWithoutPostsInput>;
  belongTo: CrewCreateOneWithoutPostsInput;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface PostCreateWithoutBelongToInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  files?: Maybe<PostCreatefilesInput>;
  postedBy?: Maybe<UserCreateOneWithoutPostsInput>;
}

export interface PostCreatefilesInput {
  set?: Maybe<String[] | String>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  matricule: String;
  email: String;
  phone: String;
  role: String;
  code: String;
  filiere: String;
  option: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  matricule: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  role: () => Promise<String>;
  code: () => Promise<String>;
  filiere: () => Promise<String>;
  option: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  matricule: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
  filiere: () => Promise<AsyncIterator<String>>;
  option: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCrew {
  count: Int;
}

export interface AggregateCrewPromise
  extends Promise<AggregateCrew>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCrewSubscription
  extends Promise<AsyncIterator<AggregateCrew>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface CrewEdge {
  node: Crew;
  cursor: String;
}

export interface CrewEdgePromise extends Promise<CrewEdge>, Fragmentable {
  node: <T = CrewPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CrewEdgeSubscription
  extends Promise<AsyncIterator<CrewEdge>>,
    Fragmentable {
  node: <T = CrewSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  name: String;
  matricule: String;
  email: String;
  phone: String;
  role: String;
  code: String;
  filiere: String;
  option: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  matricule: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  role: () => Promise<String>;
  code: () => Promise<String>;
  filiere: () => Promise<String>;
  option: () => Promise<String>;
  password: () => Promise<String>;
  crews: <T = FragmentableArray<Crew>>(args?: {
    where?: CrewWhereInput;
    orderBy?: CrewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  matricule: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
  filiere: () => Promise<AsyncIterator<String>>;
  option: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  crews: <T = Promise<AsyncIterator<CrewSubscription>>>(args?: {
    where?: CrewWhereInput;
    orderBy?: CrewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  matricule: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  role: () => Promise<String>;
  code: () => Promise<String>;
  filiere: () => Promise<String>;
  option: () => Promise<String>;
  password: () => Promise<String>;
  crews: <T = FragmentableArray<Crew>>(args?: {
    where?: CrewWhereInput;
    orderBy?: CrewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
  files: String[];
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  files: () => Promise<String[]>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  files: () => Promise<AsyncIterator<String[]>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CrewConnection {
  pageInfo: PageInfo;
  edges: CrewEdge[];
}

export interface CrewConnectionPromise
  extends Promise<CrewConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CrewEdge>>() => T;
  aggregate: <T = AggregateCrewPromise>() => T;
}

export interface CrewConnectionSubscription
  extends Promise<AsyncIterator<CrewConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CrewEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCrewSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface Post {
  id: ID_Output;
  title: String;
  description: String;
  files: String[];
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  files: () => Promise<String[]>;
  postedBy: <T = UserPromise>() => T;
  belongTo: <T = CrewPromise>() => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  files: () => Promise<AsyncIterator<String[]>>;
  postedBy: <T = UserSubscription>() => T;
  belongTo: <T = CrewSubscription>() => T;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  files: () => Promise<String[]>;
  postedBy: <T = UserPromise>() => T;
  belongTo: <T = CrewPromise>() => T;
}

export interface CrewPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
}

export interface CrewPreviousValuesPromise
  extends Promise<CrewPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
}

export interface CrewPreviousValuesSubscription
  extends Promise<AsyncIterator<CrewPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface CrewSubscriptionPayload {
  mutation: MutationType;
  node: Crew;
  updatedFields: String[];
  previousValues: CrewPreviousValues;
}

export interface CrewSubscriptionPayloadPromise
  extends Promise<CrewSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CrewPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CrewPreviousValuesPromise>() => T;
}

export interface CrewSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CrewSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CrewSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CrewPreviousValuesSubscription>() => T;
}

export interface Crew {
  id: ID_Output;
  title: String;
  description: String;
}

export interface CrewPromise extends Promise<Crew>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CrewSubscription
  extends Promise<AsyncIterator<Crew>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CrewNullablePromise
  extends Promise<Crew | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Crew",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
