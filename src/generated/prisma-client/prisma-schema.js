module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCrew {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Crew {
  id: ID!
  title: String!
  description: String!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

type CrewConnection {
  pageInfo: PageInfo!
  edges: [CrewEdge]!
  aggregate: AggregateCrew!
}

input CrewCreateInput {
  id: ID
  title: String!
  description: String!
  users: UserCreateManyWithoutCrewsInput
  posts: PostCreateManyWithoutBelongToInput
}

input CrewCreateManyWithoutUsersInput {
  create: [CrewCreateWithoutUsersInput!]
  connect: [CrewWhereUniqueInput!]
}

input CrewCreateOneWithoutPostsInput {
  create: CrewCreateWithoutPostsInput
  connect: CrewWhereUniqueInput
}

input CrewCreateWithoutPostsInput {
  id: ID
  title: String!
  description: String!
  users: UserCreateManyWithoutCrewsInput
}

input CrewCreateWithoutUsersInput {
  id: ID
  title: String!
  description: String!
  posts: PostCreateManyWithoutBelongToInput
}

type CrewEdge {
  node: Crew!
  cursor: String!
}

enum CrewOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
}

type CrewPreviousValues {
  id: ID!
  title: String!
  description: String!
}

input CrewScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [CrewScalarWhereInput!]
  OR: [CrewScalarWhereInput!]
  NOT: [CrewScalarWhereInput!]
}

type CrewSubscriptionPayload {
  mutation: MutationType!
  node: Crew
  updatedFields: [String!]
  previousValues: CrewPreviousValues
}

input CrewSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CrewWhereInput
  AND: [CrewSubscriptionWhereInput!]
  OR: [CrewSubscriptionWhereInput!]
  NOT: [CrewSubscriptionWhereInput!]
}

input CrewUpdateInput {
  title: String
  description: String
  users: UserUpdateManyWithoutCrewsInput
  posts: PostUpdateManyWithoutBelongToInput
}

input CrewUpdateManyDataInput {
  title: String
  description: String
}

input CrewUpdateManyMutationInput {
  title: String
  description: String
}

input CrewUpdateManyWithoutUsersInput {
  create: [CrewCreateWithoutUsersInput!]
  delete: [CrewWhereUniqueInput!]
  connect: [CrewWhereUniqueInput!]
  set: [CrewWhereUniqueInput!]
  disconnect: [CrewWhereUniqueInput!]
  update: [CrewUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [CrewUpsertWithWhereUniqueWithoutUsersInput!]
  deleteMany: [CrewScalarWhereInput!]
  updateMany: [CrewUpdateManyWithWhereNestedInput!]
}

input CrewUpdateManyWithWhereNestedInput {
  where: CrewScalarWhereInput!
  data: CrewUpdateManyDataInput!
}

input CrewUpdateOneRequiredWithoutPostsInput {
  create: CrewCreateWithoutPostsInput
  update: CrewUpdateWithoutPostsDataInput
  upsert: CrewUpsertWithoutPostsInput
  connect: CrewWhereUniqueInput
}

input CrewUpdateWithoutPostsDataInput {
  title: String
  description: String
  users: UserUpdateManyWithoutCrewsInput
}

input CrewUpdateWithoutUsersDataInput {
  title: String
  description: String
  posts: PostUpdateManyWithoutBelongToInput
}

input CrewUpdateWithWhereUniqueWithoutUsersInput {
  where: CrewWhereUniqueInput!
  data: CrewUpdateWithoutUsersDataInput!
}

input CrewUpsertWithoutPostsInput {
  update: CrewUpdateWithoutPostsDataInput!
  create: CrewCreateWithoutPostsInput!
}

input CrewUpsertWithWhereUniqueWithoutUsersInput {
  where: CrewWhereUniqueInput!
  update: CrewUpdateWithoutUsersDataInput!
  create: CrewCreateWithoutUsersInput!
}

input CrewWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  AND: [CrewWhereInput!]
  OR: [CrewWhereInput!]
  NOT: [CrewWhereInput!]
}

input CrewWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCrew(data: CrewCreateInput!): Crew!
  updateCrew(data: CrewUpdateInput!, where: CrewWhereUniqueInput!): Crew
  updateManyCrews(data: CrewUpdateManyMutationInput!, where: CrewWhereInput): BatchPayload!
  upsertCrew(where: CrewWhereUniqueInput!, create: CrewCreateInput!, update: CrewUpdateInput!): Crew!
  deleteCrew(where: CrewWhereUniqueInput!): Crew
  deleteManyCrews(where: CrewWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  title: String!
  description: String!
  files: [String!]!
  postedBy: User
  belongTo: Crew!
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreatefilesInput {
  set: [String!]
}

input PostCreateInput {
  id: ID
  title: String!
  description: String!
  files: PostCreatefilesInput
  postedBy: UserCreateOneWithoutPostsInput
  belongTo: CrewCreateOneWithoutPostsInput!
}

input PostCreateManyWithoutBelongToInput {
  create: [PostCreateWithoutBelongToInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutPostedByInput {
  create: [PostCreateWithoutPostedByInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutBelongToInput {
  id: ID
  title: String!
  description: String!
  files: PostCreatefilesInput
  postedBy: UserCreateOneWithoutPostsInput
}

input PostCreateWithoutPostedByInput {
  id: ID
  title: String!
  description: String!
  files: PostCreatefilesInput
  belongTo: CrewCreateOneWithoutPostsInput!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
  description: String!
  files: [String!]!
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdatefilesInput {
  set: [String!]
}

input PostUpdateInput {
  title: String
  description: String
  files: PostUpdatefilesInput
  postedBy: UserUpdateOneWithoutPostsInput
  belongTo: CrewUpdateOneRequiredWithoutPostsInput
}

input PostUpdateManyDataInput {
  title: String
  description: String
  files: PostUpdatefilesInput
}

input PostUpdateManyMutationInput {
  title: String
  description: String
  files: PostUpdatefilesInput
}

input PostUpdateManyWithoutBelongToInput {
  create: [PostCreateWithoutBelongToInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutBelongToInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutBelongToInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithoutPostedByInput {
  create: [PostCreateWithoutPostedByInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateWithoutBelongToDataInput {
  title: String
  description: String
  files: PostUpdatefilesInput
  postedBy: UserUpdateOneWithoutPostsInput
}

input PostUpdateWithoutPostedByDataInput {
  title: String
  description: String
  files: PostUpdatefilesInput
  belongTo: CrewUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithWhereUniqueWithoutBelongToInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutBelongToDataInput!
}

input PostUpdateWithWhereUniqueWithoutPostedByInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutPostedByDataInput!
}

input PostUpsertWithWhereUniqueWithoutBelongToInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutBelongToDataInput!
  create: PostCreateWithoutBelongToInput!
}

input PostUpsertWithWhereUniqueWithoutPostedByInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutPostedByDataInput!
  create: PostCreateWithoutPostedByInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  postedBy: UserWhereInput
  belongTo: CrewWhereInput
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  crew(where: CrewWhereUniqueInput!): Crew
  crews(where: CrewWhereInput, orderBy: CrewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Crew]!
  crewsConnection(where: CrewWhereInput, orderBy: CrewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CrewConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  crew(where: CrewSubscriptionWhereInput): CrewSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  matricule: String!
  email: String!
  phone: String!
  role: String!
  code: String!
  filiere: String!
  option: String!
  password: String!
  crews(where: CrewWhereInput, orderBy: CrewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Crew!]
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  matricule: String!
  email: String!
  phone: String!
  role: String!
  code: String!
  filiere: String!
  option: String!
  password: String!
  crews: CrewCreateManyWithoutUsersInput
  posts: PostCreateManyWithoutPostedByInput
}

input UserCreateManyWithoutCrewsInput {
  create: [UserCreateWithoutCrewsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCrewsInput {
  id: ID
  name: String!
  matricule: String!
  email: String!
  phone: String!
  role: String!
  code: String!
  filiere: String!
  option: String!
  password: String!
  posts: PostCreateManyWithoutPostedByInput
}

input UserCreateWithoutPostsInput {
  id: ID
  name: String!
  matricule: String!
  email: String!
  phone: String!
  role: String!
  code: String!
  filiere: String!
  option: String!
  password: String!
  crews: CrewCreateManyWithoutUsersInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  matricule_ASC
  matricule_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  role_ASC
  role_DESC
  code_ASC
  code_DESC
  filiere_ASC
  filiere_DESC
  option_ASC
  option_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  matricule: String!
  email: String!
  phone: String!
  role: String!
  code: String!
  filiere: String!
  option: String!
  password: String!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  matricule: String
  matricule_not: String
  matricule_in: [String!]
  matricule_not_in: [String!]
  matricule_lt: String
  matricule_lte: String
  matricule_gt: String
  matricule_gte: String
  matricule_contains: String
  matricule_not_contains: String
  matricule_starts_with: String
  matricule_not_starts_with: String
  matricule_ends_with: String
  matricule_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  role: String
  role_not: String
  role_in: [String!]
  role_not_in: [String!]
  role_lt: String
  role_lte: String
  role_gt: String
  role_gte: String
  role_contains: String
  role_not_contains: String
  role_starts_with: String
  role_not_starts_with: String
  role_ends_with: String
  role_not_ends_with: String
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  filiere: String
  filiere_not: String
  filiere_in: [String!]
  filiere_not_in: [String!]
  filiere_lt: String
  filiere_lte: String
  filiere_gt: String
  filiere_gte: String
  filiere_contains: String
  filiere_not_contains: String
  filiere_starts_with: String
  filiere_not_starts_with: String
  filiere_ends_with: String
  filiere_not_ends_with: String
  option: String
  option_not: String
  option_in: [String!]
  option_not_in: [String!]
  option_lt: String
  option_lte: String
  option_gt: String
  option_gte: String
  option_contains: String
  option_not_contains: String
  option_starts_with: String
  option_not_starts_with: String
  option_ends_with: String
  option_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  matricule: String
  email: String
  phone: String
  role: String
  code: String
  filiere: String
  option: String
  password: String
  crews: CrewUpdateManyWithoutUsersInput
  posts: PostUpdateManyWithoutPostedByInput
}

input UserUpdateManyDataInput {
  name: String
  matricule: String
  email: String
  phone: String
  role: String
  code: String
  filiere: String
  option: String
  password: String
}

input UserUpdateManyMutationInput {
  name: String
  matricule: String
  email: String
  phone: String
  role: String
  code: String
  filiere: String
  option: String
  password: String
}

input UserUpdateManyWithoutCrewsInput {
  create: [UserCreateWithoutCrewsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutCrewsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutCrewsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCrewsDataInput {
  name: String
  matricule: String
  email: String
  phone: String
  role: String
  code: String
  filiere: String
  option: String
  password: String
  posts: PostUpdateManyWithoutPostedByInput
}

input UserUpdateWithoutPostsDataInput {
  name: String
  matricule: String
  email: String
  phone: String
  role: String
  code: String
  filiere: String
  option: String
  password: String
  crews: CrewUpdateManyWithoutUsersInput
}

input UserUpdateWithWhereUniqueWithoutCrewsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCrewsDataInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithWhereUniqueWithoutCrewsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutCrewsDataInput!
  create: UserCreateWithoutCrewsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  matricule: String
  matricule_not: String
  matricule_in: [String!]
  matricule_not_in: [String!]
  matricule_lt: String
  matricule_lte: String
  matricule_gt: String
  matricule_gte: String
  matricule_contains: String
  matricule_not_contains: String
  matricule_starts_with: String
  matricule_not_starts_with: String
  matricule_ends_with: String
  matricule_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  role: String
  role_not: String
  role_in: [String!]
  role_not_in: [String!]
  role_lt: String
  role_lte: String
  role_gt: String
  role_gte: String
  role_contains: String
  role_not_contains: String
  role_starts_with: String
  role_not_starts_with: String
  role_ends_with: String
  role_not_ends_with: String
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  filiere: String
  filiere_not: String
  filiere_in: [String!]
  filiere_not_in: [String!]
  filiere_lt: String
  filiere_lte: String
  filiere_gt: String
  filiere_gte: String
  filiere_contains: String
  filiere_not_contains: String
  filiere_starts_with: String
  filiere_not_starts_with: String
  filiere_ends_with: String
  filiere_not_ends_with: String
  option: String
  option_not: String
  option_in: [String!]
  option_not_in: [String!]
  option_lt: String
  option_lte: String
  option_gt: String
  option_gte: String
  option_contains: String
  option_not_contains: String
  option_starts_with: String
  option_not_starts_with: String
  option_ends_with: String
  option_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  crews_every: CrewWhereInput
  crews_some: CrewWhereInput
  crews_none: CrewWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  matricule: String
  email: String
  phone: String
}
`
      }
    